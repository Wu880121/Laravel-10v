name: CI/CD Pipeline for Laravel + Docker Image Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: kocoimur0003/laravel-10v

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v3

      - name: ⏰ Generate Docker Image Tag
        id: tag
        run: |
          git fetch --tags
          TODAY=$(date +"%Y%m%d")
          COUNT=$(git tag | grep "${TODAY}_V" | wc -l)
          VERSION=$((COUNT+1))
          TAG="${TODAY}_V${VERSION}"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: 🔐 Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: 🐳 Build & Push Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ env.TAG }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ env.TAG }}

      - name: 🚀 Deploy to EC2 (PHP + Nginx)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            TAG=${{ env.TAG }}

            echo "📁 建立 Laravel 部署資料夾"
            mkdir -p /home/ec2-user/laravel-10v/storage/app/public
            mkdir -p /home/ec2-user/laravel-10v/storage/framework/{cache,sessions,views}
            mkdir -p /home/ec2-user/laravel-10v/storage/logs
            mkdir -p /home/ec2-user/laravel-10v/nginx

            echo "🔧 檢查是否存在 public 資料夾，若無則建立"
            if [ ! -d "/home/ec2-user/laravel-10v/public" ]; then
              echo "⚠️ public 資料夾不存在，建立中..."
              mkdir -p /home/ec2-user/laravel-10v/public
              chown -R ec2-user:ec2-user /home/ec2-user/laravel-10v-deploy/public
              chmod -R 775 /home/ec2-user/laravel-10v/public
            fi

            echo "📥 拉取最新 Laravel Image"
            docker pull $IMAGE_NAME:$TAG

            echo "🧹 停止並移除舊 PHP 容器"
            docker stop laravel-app || true
            docker rm laravel-app || true

            echo "🐘 啟動 Laravel 容器"
            docker run -d --name laravel-app \
              --restart unless-stopped \
              -v /home/ec2-user/laravel-10v:/var/www/html \
              $IMAGE_NAME:$TAG

            echo "🔗 建立 storage:link 與權限設定"
            docker exec laravel-app chown -R www-data:www-data /var/www/html/storage
            docker exec laravel-app php artisan storage:link

            echo "🧹 停止並移除舊 Nginx 容器"
            docker stop nginx-server || true
            docker rm nginx-server || true

            echo "🌐 啟動 Nginx 容器"
            docker run -d --name nginx-server \
              --restart unless-stopped \
              -p 8080:80 \
              -v /home/ec2-user/laravel-10v:/var/www/html \
              -v /home/ec2-user/laravel-10v/nginx/default.conf:/etc/nginx/conf.d/default.conf \
              nginx:alpine

            echo "🧽 清除 24 小時前未使用的 image"
            docker image prune -af --filter "until=24h"
